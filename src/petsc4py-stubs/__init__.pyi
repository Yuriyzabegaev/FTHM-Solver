"""Stubbs for petsc4py package.

This file is used to provide type hints for the petsc4py package, generated to be used
with the mypy static type checker (or really, to make mypy happy).

The file was generated by copilot.

"""

from typing import Any

class PETSc:
    class PC:
        def create(self) -> Any: ...
        def destroy(self) -> None: ...
        def getOperators(self) -> Any: ...
        def setUp(self) -> None: ...
        def setFromOptions(self) -> None: ...
        def setOperators(self, *args: Any) -> None: ...
        def getCompositePC(self, i: int) -> Any: ...
        def setFieldSplitIS(self, *args: Any) -> None: ...
        def setFieldSplitSchurPreType(self, *args: Any) -> None: ...
        def getFieldSplitSubKSP(self) -> Any: ...
        def setPythonContext(self, ctx: Any) -> None: ...
        def setType(self, pc_type: str) -> None: ...
        def apply(self, *args: Any) -> None: ...
        def reset(self) -> None: ...
        def view(self, *args: Any) -> None: ...

        class FieldSplitSchurPreType:
            USER: Any

    # Add other PETSc classes you need
    class Vec:
        def create(self) -> Any: ...
        def destroy(self) -> None: ...
        def setUp(self) -> None: ...
        def set(self, val: float) -> None: ...
        def setSizes(self, *args: Any) -> None: ...
        def setArray(self, array: Any) -> None: ...
        def getArray(self) -> Any: ...
        def copy(self, *args: Any) -> None: ...
        def permute(self, *args: Any, **kwargs: Any) -> None: ...

    class IS:
        def create(self) -> Any: ...
        def destroy(self) -> None: ...
        def createGeneral(self, indices: Any) -> Any: ...
        def setBlockSize(self, size: int) -> None: ...

    class Mat:
        def destroy(self) -> None: ...
        def permute(self, *args: Any) -> Any: ...
        def setBlockSize(self, size: int) -> None: ...
        def createSubMatrix(self, *args: Any) -> Any: ...
        def axpy(self, *args: Any) -> None: ...
        def createVecLeft(self) -> Any: ...

    class KSP:
        def create(self) -> Any: ...
        def destroy(self) -> None: ...
        def setOperators(self, *args: Any) -> None: ...
        def setFromOptions(self) -> None: ...
        def getPC(self) -> Any: ...
        def setUp(self) -> None: ...
        def solve(self, *args: Any) -> None: ...
        def getConvergenceHistory(self) -> Any: ...
        def setComputeEigenvalues(self, flag: bool) -> None: ...
        def setConvergenceHistory(self) -> None: ...

    class Options:
        def __setitem__(self, key: str, value: Any) -> None: ...

    class NullSpace:
        @staticmethod
        def create(constant: bool, vectors: list) -> Any: ...

    class Viewer:
        pass
